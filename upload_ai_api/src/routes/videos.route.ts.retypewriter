reTypewriter Snapshots v1

--01----------
import { FastifyInstance } from "fastify";
import fastifyMultipart from "@fastify/multipart";
import path from "node:path";
import { randomUUID } from "node:crypto";
import fs from "node:fs";
import { pipeline } from "node:stream";
import { promisify } from "node:util";
import { prisma } from "../lib/prisma";
import {z} from "zod";

const pump = promisify(pipeline);

export async function videoRoutes(app: FastifyInstance) {
  app.register(fastifyMultipart, {
    limits: {
      fileSize: 1_048_576 * 25, // 25 MB
    },
  });

  app.post("/", async (request, reply) => {
    const data = await request.file();

    if (!data)
      return reply.status(400).send({ error: "Missing file uploaded" });

    const extension = path.extname(data.filename);

    if (extension !== ".mp3")
      return reply
        .status(400)
        .send({ error: "Invalid file type, please upload a MP3." });

    const fileBaseName = path.basename(data.filename, extension);
    const fileUploadName = `${fileBaseName}-${randomUUID()}${extension}`;

    const uploadDestination = path.resolve(
      __dirname,
      "../../tmp",
      fileUploadName
    );

    await pump(data.file, fs.createWriteStream(uploadDestination));

    const videoData = await prisma.video.create({
      data: {
        name: data.filename,
        path: uploadDestination,
      },
    });

    return reply.status(201).send(videoData);
  });

  app.post("/videos/:videoId/transcript", async (request, reply) => {
    const { videoId } = request.params as { videoId: string };
    const { prompt } = request.body as { prompt: string };

    const video = await prisma.video.findUnique({
      where: {
        id: videoId,
      },
    });

    if (!video) return reply.status(404).send({ error: "Video not found" });

    return reply.status(201).send();
  });
}

--------------
