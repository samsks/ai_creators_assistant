reTypewriter Snapshots v1

--01----------
import { FileVideo, Upload } from "lucide-react";
import { Separator } from "./ui/separator";
import { Label } from "./ui/label";
import { Textarea } from "./ui/textarea";
import { Button } from "./ui/button";
import { ChangeEvent, FormEvent, useMemo, useRef, useState } from "react";
import { getFFmpeg } from "@/lib/ffmpeg";
import { fetchFile } from "@ffmpeg/util";

export function VideoInputForm () {

    const [videoFile, setVideoFile] = useState<File | null>(null);
    const promptInputRef = useRef<HTMLTextAreaElement>(null)

    function handleFileSelect (e: ChangeEvent<HTMLInputElement>){
        const {files} = e.currentTarget

        if (!files) return

        const video = files[0]

        setVideoFile(video)

    }

    async function convertVideoToAudio(video: File){
        console.log('Convert started.');

        const ffmpeg = await getFFmpeg();

        await ffmpeg.writeFile('input.mp4', await fetchFile(video))

        // {ffmpeg.FS('writeFile', 'input.mp4', await fetchFile(video))
        // await ffmpeg.run('-i', 'input.mp4', 'output.mp3')
        // const data = ffmpeg.FS('readFile', 'output.mp3')
        // const audioBlob = new Blob([data.buffer], {type: 'audio/mp3'})
        // const audioUrl = URL.createObjectURL(audioBlob)
        // console.log('Convert finished.');
        // return audioUrl}

        // ffmpeg.on('log', log => {console.log(log)})

        ffmpeg.on('progress', progress => {
            console.log('Convert progress: ' + Math.round(progress.progress * 100) );
        });


        await ffmpeg.exec([
            '-i',
            'input.mp4',
            '-map',
            '0:a',
            '-b:a',
            '20k',
            '-acodec',
            'libmp3lame',
            'output.mp3'
        ])

        const data = await ffmpeg.readFile('output.mp3')

        const audioBlob = new Blob([data], {type: 'audio/mpeg'})
        const audioFile = new File([audioBlob], 'output.mp3', {type: 'audio/mpeg'})

        console.log('Convert finished.');

        return audioFile
    }

    async function handleUploadVideo (e: FormEvent<HTMLFormElement>){
        e.preventDefault()

        const prompt = promptInputRef.current?.value

        if(!videoFile) return

        const audioFile = convertVideoToAudio(videoFile)
        console.log(audioFile);
        
    }

    const previewUrl = useMemo(() => {
        if (!videoFile) return null

        return URL.createObjectURL(videoFile)
    }, [videoFile])


    return (
        <form onSubmit={handleUploadVideo} className="space-y-6">
            <label
              htmlFor="video"
              className="relative border flex rounded-md aspect-video cursor-pointer border-dashed text-sm flex-col gap-2 items-center justify-center text-muted-foreground hover:bg-primary/5"
            >
              {previewUrl ? (
                <video src={previewUrl} controls={false} className="pointer-events-none absolute inset-0"></video>
              ) : (
              <>
              <FileVideo className="w-4 h-4" />
              Selecione um vídeo
              </>
              )}
            </label>
            <input
              type="file"
              id="video"
              accept="video/mp4"
              className="sr-only"
              onChange={handleFileSelect}
            />
            <Separator />
            <div className="space-y-2">
              <Label htmlFor="transcription-prompt" className="">
                Prompt de transcrição
              </Label>
              <Textarea
                ref={promptInputRef}
                id="transcription-prompt"
                className="h-20 leading-relaxed resize-none"
                placeholder="Inclua palavras-chave mencionadas no vídeo separadas por vírgula (,)"
              />
            </div>
            <Button type="submit" className="w-full">
              Carregar vídeo
              <Upload className="w-4 h-4 ml-2" />
            </Button>
          </form>
    )
}
--------------
